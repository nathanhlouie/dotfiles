#+TITLE: Emacs Literate Configuration
#+AUTHOR: Nathan Louie
#+DESCRIPTION: My personal Emacs configuration as a literate Org file
#+STARTUP: overview
#+PROPERTY: header-args :tangle "init.el"

*** Why Emacs?

I mean... why not? Emacs is far older than I am and seems like it'll stick around for a while longer.

1. I can use ELisp; Lispy languages are cool
2. Emacs is stable, albeit slow
3. Each package has its own niche and does it well

At the end of the day, I want mastery over the tools that I use, and I want to have fun doing so.

*** Why a literate configuration?

I'm going to forgot why I put things into my configuration. This is a gift for my future self.

Use =C-c C-c= to evaluate code blocks and =C-c C-v C-t= to tangle the file.

#+begin_src emacs-lisp :tangle no :results none
(org-babel-tangle)
#+end_src

*** Why emacs-mac over emacs-plus?

1. It generally feels more like a native OSX citizen (frames, pixels, scrolling, display)
2. The latest Emacs branch doesn't appeal to me; I'm fine using 29.X
3. I don't use emacsclient

The font face on Emacs is unusually bold due to a quirk in OSX font rendering:

#+begin_src bash :tangle no
  defaults write org.gnu.Emacs AppleFontSmoothing -int 0
#+end_src

* =early-init.el=
:PROPERTIES:
:CUSTOM_ID: early-init
:END:

The [[file:early-init.el][file]] that contains customizations that need to take effect during Emacs startup earlier than the normal =init.el= file. Customizations related to GUI features will not work reliably in =early-init.el=, but if needed use hooks to do so.

See [[https://github.com/jamescherti/minimal-emacs.d][minimal-emacs.d]] for more information.

** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical binding]]

#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; early-init.el -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

** Garbage Collection

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5)

  (add-hook 'emacs-startup-hook
            #'(lambda () (setq gc-cons-threshold (* 16 1024 1024)
                               gc-cons-percentage 0.1)))
#+end_src

** Miscellaneous

#+begin_src emacs-lisp :tangle "early-init.el"
  (set-language-environment "UTF-8")
  (setq default-input-method nil)
#+end_src

** Performance

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq load-prefer-newer t)
  (setq inhibit-compacting-font-caches t)

  (unless (daemonp)
    (let ((old-value (default-toplevel-value 'file-name-handler-alist)))
      (set-default-toplevel-value 'file-name-handler-alist
                                  (if (eval-when-compile
                                        (locate-file-internal "calc-loaddefs.el"
                                                              load-path))
                                      nil
                                    (list (rassq 'jka-compr-handler old-value))))
      (put 'file-name-handler-alist 'initial-value old-value)
      (define-advice command-line-1 (:around (fn args-left) respect-file-handlers)
        (let ((file-name-handler-alist
               (if args-left old-value file-name-handler-alist)))
          (funcall fn args-left)))
      (add-hook 'emacs-startup-hook
                (lambda ()
                  (set-default-toplevel-value
                   'file-name-handler-alist
                   (delete-dups (append file-name-handler-alist old-value))))
                101))

    (unless noninteractive

      (setq-default inhibit-message t)

      (defun minimal-emacs--reset-inhibited-vars-h ()
        (setq-default inhibit-message nil)
        (remove-hook 'post-command-hook #'minimal-emacs--reset-inhibited-vars-h))

      (add-hook 'post-command-hook
                #'minimal-emacs--reset-inhibited-vars-h -100)

      (put 'mode-line-format 'initial-value
           (default-toplevel-value 'mode-line-format))
      (setq-default mode-line-format nil)
      (dolist (buf (buffer-list))
        (with-current-buffer buf
          (setq mode-line-format nil)))

      (defun minimal-emacs--startup-load-user-init-file (fn &rest args)
        "Advice for startup--load-user-init-file to reset mode-line-format."
        (unwind-protect
            (apply fn args)
          (setq-default inhibit-message nil)
          (unless (default-toplevel-value 'mode-line-format)
            (setq-default mode-line-format
                          (get 'mode-line-format 'initial-value)))))

      (advice-add 'startup--load-user-init-file :around
                  #'minimal-emacs--startup-load-user-init-file))

    (setq frame-inhibit-implied-resize t)
    (setq auto-mode-case-fold nil)

    (setq inhibit-startup-screen t
          inhibit-startup-echo-area-message user-login-name)
    (setq initial-buffer-choice nil
          inhibit-startup-buffer-menu t
          inhibit-x-resources t)

    (setq-default bidi-display-reordering 'left-to-right
                  bidi-paragraph-direction 'left-to-right)

    (setq bidi-inhibit-bpa t)

    (advice-add #'display-startup-echo-area-message :override #'ignore)

    (advice-add #'display-startup-screen :override #'ignore)

    (setq initial-major-mode 'fundamental-mode
          initial-scratch-message nil)

    (unless (eq system-type 'darwin)
      (setq command-line-ns-option-alist nil))
    (unless (memq initial-window-system '(x pgtk))
      (setq command-line-x-option-alist nil)))
#+end_src

** Native Compilation

#+begin_src emacs-lisp :tangle "early-init.el"
  (if (and (featurep 'native-compile)
           (fboundp 'native-comp-available-p)
           (native-comp-available-p))
      (setq native-comp-jit-compilation t
            package-native-compile t)
    (setq features (delq 'native-compile features)))

  (setq native-comp-async-report-warnings-errors 'silent)
  (setq native-comp-warning-on-missing-source nil)

  (setq debug-on-error nil
        jka-compr-verbose nil)

  (setq byte-compile-warnings nil)
  (setq byte-compile-verbose nil)
#+end_src

** UI

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq frame-title-format "%b"
        icon-title-format "%b")

  (setq inhibit-splash-screen t)

  (push '(menu-bar-lines . 0) default-frame-alist)
  (unless (memq window-system '(mac ns))
    (setq menu-bar-mode nil))

  (unless (daemonp)
    (unless noninteractive
      (when (fboundp 'tool-bar-setup)
        (advice-add #'tool-bar-setup :override #'ignore)
        (define-advice startup--load-user-init-file
            (:after (&rest _) minimal-emacs-setup-toolbar)
          (advice-remove #'tool-bar-setup #'ignore)
          (when tool-bar-mode
            (tool-bar-setup))))))
  (push '(tool-bar-lines . 0) default-frame-alist)
  (setq tool-bar-mode nil)

  (push '(vertical-scroll-bars) default-frame-alist)
  (push '(horizontal-scroll-bars) default-frame-alist)
  (setq scroll-bar-mode nil)
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (when (bound-and-true-p tooltip-mode)
    (tooltip-mode -1))

  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
#+end_src

** Package Management

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq package-enable-at-startup nil
        use-package-always-ensure t)
#+end_src

* =init.el=
:PROPERTIES:
:CUSTOM_ID: init
:END:

** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical binding]]

#+begin_src emacs-lisp
  ;;; init.el -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

** Elpaca

#+begin_quote
An ELisp package manager.
#+end_quote

Uses =use-package= instead of the =elpaca= macro. Make sure to use the =:wait= recipe keyword for blocking packages that are used in the init file itself. See [[https://github.com/progfolio/elpaca][Elpaca]] for more details.

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.8)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
    (elpaca-use-package-mode))

  (elpaca-wait)
#+end_src

** Better defaults
*** Frame configuration

By default Emacs will resize the frame if you adjust the font size.

#+begin_src emacs-lisp
  (setq frame-inhibit-implied-resize t
		frame-resize-pixelwise t
		frame-title-format '("%b")
		ring-bell-function 'ignore
		split-width-threshold 300
		visible-bell nil)
#+end_src

Use precise pixel scrolling.

#+begin_src emacs-lisp
  (setq pixel-scroll-precision-mode t
		pixel-scroll-precision-use-momentum nil)
#+end_src

*** Startup

Disable everything Emacs does on startup.

#+begin_src emacs-lisp
  (setq inhibit-splash-screen t
		inhibit-startup-buffer-menu t
		inhibit-startup-echo-area-message user-login-name
		inhibit-startup-message t
		inhibit-startup-screen t
		initial-buffer-choice t
		initial-scratch-message "")
#+end_src

*** Hide UI components

#+begin_src emacs-lisp
  (setq cursor-in-non-selected-windows nil
	indicate-empty-lines nil
	use-dialog-box nil
	use-file-dialog nil
	use-short-answers t
	show-help-function nil)

  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
#+end_src

Since the menu-bar is desktop-wide on OSX, see the [[https://bitbucket.org/mituharu/emacs-mac/src/892fa7b2501a403b4f0aea8152df9d60d63f391a/doc/emacs/macport.texi?at=master#macport.texi-529][documentation]] for the following:

#+begin_src emacs-lisp
  (if (display-graphic-p)
      (menu-bar-mode 1)
    (menu-bar-mode -1))
#+end_src

*** Decluttering files

I have no need for backup and lock files, but auto-save files are still handy to keep, just not littered around everywhere.

#+begin_src emacs-lisp
  (setq create-lockfiles nil
        make-backup-files nil)

  (setq auto-save-default t
        auto-save-interval 200
        auto-save-timeout 20)

  (let ((auto-save-dir (concat user-emacs-directory "auto-save/")))
    (unless (file-exists-p auto-save-dir)
      (make-directory auto-save-dir))
    (setq auto-save-file-name-transforms `((".*" ,auto-save-dir t)))
    (setq tramp-auto-save-directory auto-save-dir))

  (setq delete-by-moving-to-trash t)
#+end_src

*** Encoding / Language

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "English")
  (set-terminal-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (setq ispell-dictionary "en_US")
#+end_src

*** OSX Specific

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq ns-use-native-fullscreen t
	  mac-option-key-is-meta nil
	  mac-command-key-is-meta t
	  mac-command-modifier 'meta
	  mac-option-modifier nil
	  mac-use-title-bar nil))
#+end_src

Makes sure that clipboard works properly in TTY.

#+begin_src emacs-lisp
  (defun copy-from-osx ()
    (shell-command-to-string "pbpaste"))
  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
	(process-send-string proc text)
	(process-send-eof proc))))
  (when (and (not (display-graphic-p))
	     (eq system-type 'darwin))
    (setq interprogram-cut-function 'paste-to-osx)
    (setq interprogram-paste-function 'copy-from-osx))
#+end_src

*** Editing

Load concurrent changes to open files so they aren't deleted.

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

Cleanup whitespaces.

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)

  (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+end_src

Use =setq-default= here since =indent-tabs-mode= is a buffer-local variable, and I want this change globally.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-always-indent 'complete)
#+end_src

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src

*** Miscellaneous

#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-auto-cleanup 'never)
  (savehist-mode 1)
  (save-place-mode 1)
  (winner-mode 1)
  (xterm-mouse-mode 1)
#+end_src

** Dependencies

Seems like Elpaca has issues with how =eldoc= and =seq= are installed. This should get rid of =Warning (emacs): eldoc loaded before Elpaca bactivation=.

#+begin_src emacs-lisp
  (unload-feature 'eldoc t)
  (setq custom-delayed-init-variables '())
  (setq global-eldoc-mode nil)

  (elpaca eldoc
    (require 'eldoc)
    (global-eldoc-mode))

  (defun +elpaca-unload-seq (e)
    (and (featurep 'seq) (unload-feature 'seq t))
    (elpaca--continue-build e))

  (defun +elpaca-seq-build-steps ()
    (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                         elpaca--pre-built-steps elpaca-build-steps))
            (list '+elpaca-unload-seq 'elpaca--activate-package)))
  (elpaca `(seq :build ,(+elpaca-seq-build-steps)))

  (use-package jsonrpc
    :ensure (:wait t)
    :defer t)
#+end_src

** Vertico

#+begin_quote
VERTical Interactive COmpletion; better completion commands and tables.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package vertico
    :demand t
    :bind (:map vertico-map ("C-q" . #'vertico-quick-insert))
    :custom
    (enable-recursive-minibuffers t)
    (read-extended-command-predicate #'command-completion-default-include-p)
    (read-file-name-completion-ignore-case t)
    (read-buffer-completion-ignore-case t)
    (completion-ignore-case t)
    (vertico-scroll-margin 0)
    (vertico-count 10)
    (vertico-resize t)
    (vertico-cycle t)
    (vertico-multiform-commands '((consult-line buffer)
                                  (consult-imenu reverse buffer)))
    (vertico-multiform-categories '((embark-keybinding grid)
                                    (file flat)))
    :config
    (vertico-mode)
    (vertico-multiform-mode)
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    (defun +embark-live-vertico ()
      "Shrink Vertico minibuffer when `embark-live' is active."
      (when-let (win (and (string-prefix-p "*Embark Live" (buffer-name))
                          (active-minibuffer-window)))
        (with-selected-window win
          (when (and (bound-and-true-p vertico--input)
                     (fboundp 'vertico-multiform-unobtrusive))
            (vertico-multiform-unobtrusive)))))
    (add-hook 'embark-collect-mode-hook #'+embark-live-vertico))
#+end_src

** Orderless

#+begin_quote
An orderless completion style that matches candidates in any order.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package orderless
    :defer 1
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia

#+begin_quote
Adds marginalia annotations to completion candidates.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package marginalia
    :defer 2
    :config
    (marginalia-mode))
#+end_src

** Consult

#+begin_quote
Uses completing-read for search and navigation.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package consult
    :demand t
    :bind (("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ("C-x M-:" . consult-complex-command)
           ("C-x b" . consult-buffer)
           ("C-x 4 b" . consult-buffer-other-window)
           ("C-x 5 b" . consult-buffer-other-frame)
           ("C-x t b" . consult-buffer-other-tab)
           ("C-x r b" . consult-bookmark)
           ("C-x p b" . consult-project-buffer)
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)
           ("C-M-#" . consult-register)
           ("M-y" . consult-yank-pop)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)
           ("M-g g" . consult-goto-line)
           ("M-g M-g" . consult-goto-line)
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ("M-s d" . consult-find)
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)
           ("M-s e" . consult-isearch-history)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           :map minibuffer-local-map
           ("M-s" . consult-history)
           ("M-r" . consult-history))
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :custom
    (register-preview-delay 0.5)
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref)
    (consult-narrow-key "<")
    (consult-preview-key 'any)
    (consult-line-numbers-widen t)
    :config
    (advice-add #'register-preview :override #'consult-register-window)
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     :preview-key '(:debounce 0.4 any)))
#+end_src

** Embark

#+begin_quote
Rich command actions based on a target.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package embark
    :demand t
    :bind (("C-." . embark-act)
           ("M-." . embark-dwim)
           ("C-h B" . embark-bindings)
           :map minibuffer-local-map
           ("C-c C-c" . embark-collect)
           ("C-c C-e" . embark-export))
    :config
    (setq prefix-help-command #'embark-prefix-help-command)
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :defer 1
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package wgrep
    :defer 1)
#+end_src

** Cape

#+begin_quote
Completion At Point Extensions; completion backends.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package cape
    :demand t
    :bind ("C-c p" . cape-prefix-map)
    :config
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-line)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    (add-hook 'completion-at-point-functions #'cape-history)
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))
#+end_src

** Avy

#+begin_quote
Jump anywhere using a few characters.
#+end_quote

See more uses [[https://karthinks.com/software/avy-can-do-anything/][here]].

#+begin_src emacs-lisp :tangle no
  (use-package avy
    :demand t
    :bind (("C-;" . avy-resume)
           ("M-g c" . avy-goto-char)
           ("M-g f" . avy-goto-line)
           ("M-g w" . avy-goto-word-1))
    :config
    (avy-setup-default))
#+end_src

** Anzu

#+begin_quote
Minor mode which displays current match and total matches information in the mode-line during searches.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package anzu
    :defer 10
    :config (global-anzu-mode))
#+end_src

** Corfu

#+begin_quote
COmpletion in Region FUnction; enhanced in-buffer completion.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package corfu
    :demand t
    :custom
    (corfu-quit-no-match t)
    (global-corfu-minibuffer
     (lambda ()
       (not (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input)
                (eq (current-local-map) read-passwd-map)))))
    (corfu-cycle t)
    (corfu-preselect 'prompt)
    (completion-category-overrides '((eglot (styles orderless))
                                     (eglot-capf (styles orderless))))
    :config
    (keymap-unset corfu-map "RET")
    (global-corfu-mode))

  (use-package corfu-candidate-overlay
    :demand t
    ;;:bind (("<tab>" . completion-at-point)
    ;;       ("C-<tab>" . corfu-candidate-overlay-complete-at-point))
    :config
    (corfu-candidate-overlay-mode))
#+end_src

** Projectile

#+begin_quote
A project interaction library.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package projectile
    :demand t
    :config
    (add-to-list 'projectile-globally-ignored-directories "*node_modules")
    (projectile-mode))
#+end_src

** Flymake

#+begin_quote
Syntax checking and linting.
#+end_quote

#+begin_src emacs-lisp
  (use-package flymake
    :config
    (flymake-mode))
#+end_src

** Eglot

#+begin_quote
Emacs LSP client.
#+end_quote

#+begin_src emacs-lisp
  (use-package eglot
    :defer t
    :config
    (add-hook 'eglot-server-initialized-hook #'flymake-mode))
#+end_src

** Apheleia

#+begin_quote
Code formatting.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package apheleia
    :config
    (apheleia-global-mode))
#+end_src

** Treesitter

#+begin_quote
Rich syntax highlighting and comprehension.
#+end_quote

#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))
#+end_src

** Dape

#+begin_quote
Debug Adapter Protocol for Emacs
#+end_quote

Enable repeat mode for more ergonomic use.

#+begin_src emacs-lisp :tangle no
  (use-package dape
    :config
    (dape-breakpoint-global-mode)
    (repeat-mode))
#+end_src

** Vterm

#+begin_quote
Terminal emulator built on libvterm.
#+end_quote

#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** Tramp

#+begin_quote
Remote file editing.
#+end_quote

#+begin_src emacs-lisp
(setq tramp-terminal-type "tramp")
#+end_src

If the above doesn't work, use =sshx= instead of =ssh=. See this [[https://www.emacswiki.org/emacs/TrampMode#h5o-9][link]] for more details.

** Magit

#+begin_quote
A Git interface.
#+end_quote

#+begin_src emacs-lisp
  (use-package transient
    :defer t)

  (use-package magit
    :defer t
    :custom
    (magit-diff-refine-hunk 'all)
    :config
    (transient-bind-q-to-quit))

  (use-package forge
    :after magit)
#+end_src

** Diff-hl

#+begin_quote
Git gutter.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package diff-hl
    :defer t
    :config
    (global-diff-hl-mode))
#+end_src

** Smartparens

#+begin_quote
Minor mode for smart (auto) parenthesis pairs
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode))
#+end_src

** Dired

#+begin_quote
Directory browsing commands.
#+end_quote

#+begin_src emacs-lisp
  (setq dired-mouse-drag-files t)
  (setq dired-listing-switches "-alh")
  (setq dired-kill-when-opening-new-dired-buffer t)
#+end_src

** Theme

Set font configuration first.

#+begin_src emacs-lisp
  (setq treesit-font-lock-level 4)

  (set-face-attribute 'default nil :family "RobotoMono Nerd Font" :height 240 :weight 'medium)
#+end_src

** Modeline

#+begin_quote
Enhanced mode-line.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package doom-modeline
    :defer 2
    :custom
    (doom-modeline-time-analogue-clock nil)
    (doom-modeline-time-icon nil)
    (doom-modeline-unicode-fallback nil)
    (doom-modeline-buffer-encoding 'nondefault)
    (doom-modeline-icon t)
    :config
    (doom-modeline-mode))
#+end_src

** Org

#+begin_quote
Notes, documents, literate programming, life in general.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package org
    :defer t)
#+end_src

** Olivetti

#+begin_quote
Enhanced writing environment.
#+end_quote

#+begin_src emacs-lisp :tangle no
  (use-package olivetti
    :defer t)
#+end_src

** Which-key

#+begin_quote
Helpful
#+end_quote

#+begin_src emacs-lisp
    (use-package which-key)
#+end_src
