#+TITLE: Emacs Literate Configuration
#+AUTHOR: Nathan Louie
#+DESCRIPTION: My personal Emacs configuration as a literate Org file
#+STARTUP: overview
#+PROPERTY: header-args :tangle "init.el"

*** Why Emacs?

I mean... why not? Emacs is far older than I am and seems like it'll stick around for a while longer.

1. I can use ELisp; Lispy languages are cool
2. Emacs is stable, albeit slow
3. Each package has its own niche and does it well

At the end of the day, I want mastery over the tools that I use, and I want to have fun doing so.

*** Why a literate configuration?

I'm going to forgot why I put things into my configuration. This is a gift for my future self.

Use =C-c C-c= to evaluate code blocks and =C-c C-v C-t= to tangle the file.

#+begin_src emacs-lisp :tangle no :results none
(org-babel-tangle)
#+end_src

*** Why emacs-mac over emacs-plus?

1. It generally feels more like a native OSX citizen (frames, pixels, scrolling, display)
2. The latest Emacs branch doesn't appeal to me; I'm fine using 29.X
3. I don't use emacsclient

The font face on Emacs is unusually bold due to a quirk in OSX font rendering:

#+begin_src bash :tangle no
  defaults write org.gnu.Emacs AppleFontSmoothing -int 0
#+end_src

* =early-init.el=
:PROPERTIES:
:CUSTOM_ID: early-init
:END:

The [[file:early-init.el][file]] that contains customizations that need to take effect during Emacs startup earlier than the normal =init.el= file. Customizations related to GUI features will not work reliably in =early-init.el=, but if needed use hooks to do so.

See [[https://github.com/jamescherti/minimal-emacs.d][minimal-emacs.d]] for more information.

** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical binding]]

#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; early-init.el -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

** Garbage Collection

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5)

  (add-hook 'emacs-startup-hook
            #'(lambda () (setq gc-cons-threshold (* 16 1024 1024)
                               gc-cons-percentage 0.1)))
#+end_src

** Miscellaneous

#+begin_src emacs-lisp :tangle "early-init.el"
  (set-language-environment "UTF-8")
  (setq default-input-method nil)
#+end_src

** Performance

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq load-prefer-newer t)
  (setq inhibit-compacting-font-caches t)

  (unless (daemonp)
    (let ((old-value (default-toplevel-value 'file-name-handler-alist)))
      (set-default-toplevel-value 'file-name-handler-alist
                                  (if (eval-when-compile
                                        (locate-file-internal "calc-loaddefs.el"
                                                              load-path))
                                      nil
                                    (list (rassq 'jka-compr-handler old-value))))
      (put 'file-name-handler-alist 'initial-value old-value)
      (define-advice command-line-1 (:around (fn args-left) respect-file-handlers)
        (let ((file-name-handler-alist
               (if args-left old-value file-name-handler-alist)))
          (funcall fn args-left)))
      (add-hook 'emacs-startup-hook
                (lambda ()
                  (set-default-toplevel-value
                   'file-name-handler-alist
                   (delete-dups (append file-name-handler-alist old-value))))
                101))

    (unless noninteractive

      (setq-default inhibit-message t)

      (defun minimal-emacs--reset-inhibited-vars-h ()
        (setq-default inhibit-message nil)
        (remove-hook 'post-command-hook #'minimal-emacs--reset-inhibited-vars-h))

      (add-hook 'post-command-hook
                #'minimal-emacs--reset-inhibited-vars-h -100)

      (put 'mode-line-format 'initial-value
           (default-toplevel-value 'mode-line-format))
      (setq-default mode-line-format nil)
      (dolist (buf (buffer-list))
        (with-current-buffer buf
          (setq mode-line-format nil)))

      (defun minimal-emacs--startup-load-user-init-file (fn &rest args)
        "Advice for startup--load-user-init-file to reset mode-line-format."
        (unwind-protect
            (apply fn args)
          (setq-default inhibit-message nil)
          (unless (default-toplevel-value 'mode-line-format)
            (setq-default mode-line-format
                          (get 'mode-line-format 'initial-value)))))

      (advice-add 'startup--load-user-init-file :around
                  #'minimal-emacs--startup-load-user-init-file))

    (setq frame-inhibit-implied-resize t)
    (setq auto-mode-case-fold nil)

    (setq inhibit-startup-screen t
          inhibit-startup-message t
          inhibit-startup-echo-area-message user-login-name)
    (setq initial-buffer-choice nil
          inhibit-startup-buffer-menu t
          inhibit-x-resources t)

    (setq-default bidi-display-reordering 'left-to-right
                  bidi-paragraph-direction 'left-to-right)

    (setq bidi-inhibit-bpa t)

    (advice-add #'display-startup-echo-area-message :override #'ignore)

    (advice-add #'display-startup-screen :override #'ignore)

    (setq initial-major-mode 'fundamental-mode
          initial-scratch-message nil)

    (unless (eq system-type 'darwin)
      (setq command-line-ns-option-alist nil))
    (unless (memq initial-window-system '(x pgtk))
      (setq command-line-x-option-alist nil)))
#+end_src

** Native Compilation

#+begin_src emacs-lisp :tangle "early-init.el"
  (if (and (featurep 'native-compile)
           (fboundp 'native-comp-available-p)
           (native-comp-available-p))
      (setq native-comp-jit-compilation t
            package-native-compile t)
    (setq features (delq 'native-compile features)))

  (setq native-comp-async-report-warnings-errors 'silent)
  (setq native-comp-warning-on-missing-source nil)

  (setq debug-on-error nil
        jka-compr-verbose nil)

  (setq byte-compile-warnings nil)
  (setq byte-compile-verbose nil)
#+end_src

** UI

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq frame-title-format "%b"
        icon-title-format "%b")

  (setq inhibit-splash-screen t)

  (push '(menu-bar-lines . 0) default-frame-alist)
  (unless (memq window-system '(mac ns))
    (setq menu-bar-mode nil))

  (unless (daemonp)
    (unless noninteractive
      (when (fboundp 'tool-bar-setup)
        (advice-add #'tool-bar-setup :override #'ignore)
        (define-advice startup--load-user-init-file
            (:after (&rest _) minimal-emacs-setup-toolbar)
          (advice-remove #'tool-bar-setup #'ignore)
          (when tool-bar-mode
            (tool-bar-setup))))))
  (push '(tool-bar-lines . 0) default-frame-alist)
  (setq tool-bar-mode nil)

  (push '(vertical-scroll-bars) default-frame-alist)
  (push '(horizontal-scroll-bars) default-frame-alist)
  (setq scroll-bar-mode nil)
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (when (bound-and-true-p tooltip-mode)
    (tooltip-mode -1))

  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
#+end_src

** Package Management

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq package-enable-at-startup nil
        use-package-always-ensure t)
#+end_src

* =init.el=
:PROPERTIES:
:CUSTOM_ID: init
:END:

** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical binding]]

#+begin_src emacs-lisp
  ;;; init.el -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

** Elpaca

#+begin_quote
An ELisp package manager.
#+end_quote

Uses =use-package= instead of the =elpaca= macro. Make sure to use the =:wait= recipe keyword for blocking packages that are used in the init file itself. See [[https://github.com/progfolio/elpaca][Elpaca]] for more details.

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.8)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
    (elpaca-use-package-mode))

  (elpaca-wait)
#+end_src

** Better Defaults
*** Networking

#+begin_src emacs-lisp
  (setq ffap-machine-p-known 'reject)
#+end_src

*** Warnings

#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept)
  (setq warning-suppress-types '((lexical-binding)))
  (setq warning-minimum-level :error)
#+end_src

*** Minibuffer

#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)

  (setq minibuffer-prompt-properties
        '(read-only t intangible t cursor-intangible t face
                    minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

*** UI

#+begin_src emacs-lisp
  (setq idle-update-delay 1.0)
  (if (boundp 'use-short-answers)
      (setq use-short-answers t)
    (advice-add #'yes-or-no-p :override #'y-or-n-p))
  (defalias #'view-hello-file #'ignore)
#+end_src

*** Show Parenthesis

#+begin_src emacs-lisp
  (setq show-paren-delay 0.1
        show-paren-highlight-openparen t
        show-paren-when-point-inside-paren t
        show-paren-when-point-in-periphery t)
  (show-paren-mode +1)
#+end_src

*** Compilation

#+begin_src emacs-lisp
  (setq compilation-always-kill t
        compilation-ask-about-save nil
        compilation-scroll-output 'first-error)
#+end_src

*** Miscellaneous

#+begin_src emacs-lisp
  (setq whitespace-line-column nil)

  (setq rainbow-delimiters-max-face-count 5)

  (setq-default display-line-numbers-width 3)
  (setq-default display-line-numbers-widen t)

  (setq truncate-string-ellipsis "…")

  (setq read-process-output-max (* 512 1024))

  (setq redisplay-skip-fontification-on-input t)

  (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)

  (setq abbrev-file-name (expand-file-name "abbrev_defs" user-emacs-directory))

  (setq x-underline-at-descent-line nil)
  (setq indicate-buffer-boundaries 'left)

  (winner-mode 1)
  (delete-selection-mode 1)
  (electric-pair-mode 1)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'visual-line-mode)
  (let ((hl-line-hooks '(text-mode-hook prog-mode-hook)))
    (mapc (lambda (hook) (add-hook hook 'hl-line-mode)) hl-line-hooks))
#+end_src

*** Files

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash (not noninteractive))
  (setq find-file-suppress-same-file-warnings t)

  (setq find-file-visit-truename t
        vc-follow-symlinks t)

  (setq split-width-threshold 170
        split-height-threshold nil)

  (setq window-divider-default-bottom-width 1
        window-divider-default-places t
        window-divider-default-right-width 1)
#+end_src

#+begin_src emacs-lisp
  (setq create-lockfiles nil
        make-backup-files nil)

  (setq auto-save-default t
        auto-save-include-big-deletions t
        auto-save-interval 200
        auto-save-timeout 20)

  (let ((auto-save-dir (concat user-emacs-directory "auto-save/")))
    (unless (file-exists-p auto-save-dir)
      (make-directory auto-save-dir))
    (setq auto-save-file-name-transforms `((".*" ,auto-save-dir t)))
    (setq auto-save-list-file-prefix auto-save-dir)
    (setq tramp-auto-save-directory auto-save-dir))

  (setq auto-save-include-big-deletions t)
#+end_src

*** Auto Revert

#+begin_src emacs-lisp
  (setq revert-without-query (list ".")
        auto-revert-stop-on-user-input nil
        auto-revert-verbose t)

  (setq auto-revert-avoid-polling t
        auto-revert-interval 5
        auto-revert-check-vc-info t)

  (setq global-auto-revert-non-file-buffers t)
#+end_src

*** Buffers

#+begin_src emacs-lisp
  (setq switch-to-buffer-obey-display-actions t)

  (setq uniquify-buffer-name-style 'forward)

  (setq comint-prompt-read-only t)
  (setq comint-buffer-maximum-size 2048)

  (setq confirm-nonexistent-file-or-buffer nil)
#+end_src

*** Version Control

#+begin_src emacs-lisp
  (setq vc-git-print-log-follow t)
  (setq vc-make-backup-files nil)
#+end_src

*** recentf

#+begin_src emacs-lisp
  (setq recentf-max-saved-items 300)
  (setq recentf-max-menu-items 15)
  (setq recentf-auto-cleanup 'never)
  (defun minimal-emacs--cleanup-hook ()
    "Run `recentf-cleanup' if `recentf' is loaded and `recentf-mode' is enabled."
    (when (and (featurep 'recentf)
               recentf-mode
               (fboundp 'recentf-cleanup))
      (recentf-cleanup)))
  (add-hook 'kill-emacs-hook #'minimal-emacs--cleanup-hook)

  (setq recentf-exclude (list "^/\\(?:ssh\\|su\\|sudo\\)?:"))
#+end_src

*** saveplace

#+begin_src emacs-lisp
  (setq save-place-file (expand-file-name "saveplace" user-emacs-directory))
  (setq save-place-limit 600)
#+end_src

*** savehist

#+begin_src emacs-lisp
  (setq history-length 300)
  (setq savehist-save-minibuffer-history t)
#+end_src

*** Frames and Windows

#+begin_src emacs-lisp
  (setq frame-inhibit-implied-resize t
        frame-resize-pixelwise t)

  (setq window-resize-pixelwise nil)

  (setq resize-mini-windows 'grow-only)
#+end_src

*** Scrolling

#+begin_src emacs-lisp
  (setq scroll-error-top-bottom t)

  (setq scroll-preserve-screen-position t)

  (setq scroll-conservatively 10)

  (setq scroll-step 1)

  (setq auto-window-vscroll nil)

  (setq scroll-margin 0)

  (setq hscroll-margin 2
        hscroll-step 1)

  (setq pixel-scroll-precision-use-momentum nil)
  (pixel-scroll-precision-mode 1)
#+end_src

*** Mouse

#+begin_src emacs-lisp
  (setq mouse-yank-at-point nil)

  (setq mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
        mouse-wheel-scroll-amount-horizontal 2)
#+end_src

*** Cursor

#+begin_src emacs-lisp
  (blink-cursor-mode -1)

  (setq blink-matching-paren nil)

  (setq x-stretch-cursor nil)

  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)
#+end_src

*** Annoyances

#+begin_src emacs-lisp
  (setq visible-bell nil)
  (setq ring-bell-function #'ignore)

  (setq delete-pair-blink-delay 0.03)
#+end_src

*** Indent and Formatting

#+begin_src emacs-lisp
  (setq-default left-fringe-width  8)
  (setq-default right-fringe-width 8)

  (setq-default indicate-buffer-boundaries nil)
  (setq-default indicate-empty-lines nil)

  (setq-default word-wrap t)

  (setq-default truncate-lines t)

  (setq truncate-partial-width-windows nil)

  (setq-default indent-tabs-mode nil
                tab-width 4)

  (setq-default tab-always-indent 'complete)

  (setq read-extended-command-predicate #'command-completion-default-include-p)

  (setq comment-multi-line t)

  (setq-default fill-column 80)

  (setq sentence-end-double-space nil)
  (add-hook 'before-save-hook #'delete-trailing-whitespace)

  (setq require-final-newline t)

  (setq kill-do-not-save-duplicates t)

  (setq comment-empty-lines t)

  (setq lazy-highlight-initial-delay 0)
#+end_src

*** Modeline

#+begin_src emacs-lisp
  (setq display-time-default-load-average nil)
  (setq line-number-mode t)
  (setq column-number-mode t)
#+end_src

*** Filetype

#+begin_src emacs-lisp
  (setq python-indent-guess-indent-offset-verbose nil)

  (setq sh-indent-after-continuation 'always)
#+end_src

*** Dired

#+begin_src emacs-lisp
  (setq dired-free-space nil
        dired-dwim-target t
        dired-deletion-confirmer 'y-or-n-p
        dired-filter-verbose nil
        dired-recursive-deletes 'top
        dired-recursive-copies  'always
        dired-create-destination-dirs 'ask
        dired-auto-revert-buffer #'dired-buffer-stale-p
        image-dired-thumb-size 150)

  (setq dired-clean-confirm-killing-deleted-buffers nil)

  (setq dired-omit-verbose nil)
  (setq dired-omit-files (concat "\\`[.]?#\\|\\`[.][.]?\\'"
                                 "\\|\\(?:\\.js\\)?\\.meta\\'"
                                 "\\|\\.\\(?:elc|a\\|o\\|pyc\\|pyo\\|swp\\|class\\)\\'"
                                 "\\|^\\.DS_Store\\'"
                                 "\\|^\\.\\(?:svn\\|git\\)\\'"
                                 "\\|^\\.ccls-cache\\'"
                                 "\\|^__pycache__\\'"
                                 "\\|^\\.project\\(?:ile\\)?\\'"
                                 "\\|^flycheck_.*"
                                 "\\|^flymake_.*"))

  (setq ls-lisp-verbosity nil)
  (setq ls-lisp-dirs-first t)
#+end_src

*** Font

#+begin_src emacs-lisp
  (setq global-text-scale-adjust-resizes-frames nil)

  (setq treesit-font-lock-level 4)

  (set-face-attribute 'default nil :family "RobotoMono Nerd Font" :height 240 :weight 'medium)
#+end_src

*** Ediff

#+begin_src emacs-lisp
  (setq ediff-window-setup-function #'ediff-setup-windows-plain
        ediff-split-window-function #'split-window-horizontally)
#+end_src

*** Help

#+begin_src emacs-lisp
  (setq apropos-do-all t)

  (setq help-enable-completion-autoload nil)
  (setq help-enable-autoload nil)
  (setq help-enable-symbol-autoload nil)
#+end_src

*** Encoding

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (setq ispell-dictionary "en_US")
#+end_src

*** OSX Specific

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq ns-use-native-fullscreen t
          mac-option-key-is-meta nil
          mac-command-key-is-meta t
          mac-command-modifier 'meta
          mac-option-modifier nil
          mac-use-title-bar nil)
    (setq dired-use-ls-dired nil))
#+end_src

Makes sure that clipboard works properly in TTY.

#+begin_src emacs-lisp
  (defun copy-from-osx ()
    (shell-command-to-string "pbpaste"))
  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))
  (when (and (not (display-graphic-p))
             (eq system-type 'darwin))
    (setq interprogram-cut-function 'paste-to-osx)
    (setq interprogram-paste-function 'copy-from-osx))
#+end_src

*** Add Hooks

#+begin_src emacs-lisp
  (add-hook 'after-init-hook #'global-auto-revert-mode)
  (add-hook 'after-init-hook #'recentf-mode)
  (add-hook 'after-init-hook #'savehist-mode)
  (add-hook 'after-init-hook #'save-place-mode)
#+end_src

** Which-Key

#+begin_quote
Displays keybindings.
#+end_quote

#+begin_src emacs-lisp
  (use-package which-key
    :custom
    (which-key-idle-delay 0.2)
    :config
    (which-key-mode))
#+end_src

** Uniquify

#+begin_quote
Makes buffer names with the same name unique.
#+end_quote

#+begin_src emacs-lisp
  (use-package uniquify
    :ensure nil
    :custom
    (uniquify-buffer-name-style 'reverse)
    (uniquify-separator "•")
    (uniquify-after-kill-buffer-p t)
    (uniquify-ignore-buffers-re "^\\*"))
#+end_src

** Tramp

#+begin_quote
Transparent Remote Access, Multiple Protocols, editing remote files
#+end_quote

#+begin_src emacs-lisp
  (setq tramp-terminal-type "tramp")
#+end_src

If the above doesn’t work, use =sshx= instead of =ssh=. See this [[https://www.emacswiki.org/emacs/TrampMode#h5o-9][link]] for more details.

** GCMH

#+begin_quote
The Garbage Collector Magic Hack.
#+end_quote

#+begin_src emacs-lisp
  (use-package gcmh
    :demand t
    :config
    (gcmh-mode))
#+end_src

** Exec Path From Shell

#+begin_quote
Ensure environment variables inside Emacs look the same as in the shell.
#+end_quote

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :demand t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

** Dependencies

Seems like Elpaca has issues with how =eldoc= and =seq= are installed. This should get rid of =Warning (emacs): eldoc loaded before Elpaca bactivation=.

#+begin_src emacs-lisp
  (unload-feature 'eldoc t)
  (setq custom-delayed-init-variables '())
  (setq global-eldoc-mode nil)

  (elpaca eldoc
    (require 'eldoc)
    (global-eldoc-mode))

  (defun +elpaca-unload-seq (e)
    (and (featurep 'seq) (unload-feature 'seq t))
    (elpaca--continue-build e))

  (defun +elpaca-seq-build-steps ()
    (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                         elpaca--pre-built-steps elpaca-build-steps))
            (list '+elpaca-unload-seq 'elpaca--activate-package)))
  (elpaca `(seq :build ,(+elpaca-seq-build-steps)))

  (use-package jsonrpc
    :ensure (:wait t)
    :defer t)

  (setq eglot-sync-connect 1
        eglot-autoshutdown t)
  (setq eglot-extend-to-xref t)
  (setq jsonrpc-event-hook nil)
  (setq eglot-events-buffer-size 0)
  (setq eglot-report-progress nil)
  (fset #'jsonrpc--log-event #'ignore)

  (setq eglot-events-buffer-config '(:size 0 :format full))

  (setq flymake-fringe-indicator-position 'left-fringe)
  (setq flymake-show-diagnostics-at-end-of-line nil)
  (setq flymake-suppress-zero-counters t)
  (setq flymake-wrap-around nil)
#+end_src

** Magit

#+begin_quote
A Git interface.
#+end_quote

#+begin_src emacs-lisp
  (use-package transient
    :defer t)

  (use-package magit
    :defer t
    :bind
    (("C-c g b" . 'magit-branch)
     ("C-c g B" . 'magit-blame)
     ("C-c g c" . 'magit-clone)
     ("C-c g f" . 'magit-find-file)
     ("C-c g i" . 'magit-init)
     ("C-c g l" . 'magit-log-buffer-file)
     ("C-c g m" . 'magit-dispatch)
     ("C-c g S" . 'magit-stage-file)
     ("C-c g s" . 'magit-status)
     ("C-c g U" . 'magit-unstage-file))
    :custom
    (magit-diff-refine-hunk 'all)
    :config
    (transient-bind-q-to-quit))

  (use-package forge
    :after magit
    :custom
    (forge-add-default-bindings nil)
    (forge-display-in-status-buffer nil)
    (forge-add-pullreq-refspec nil))
#+end_src

** Vertico

#+begin_quote
VERTical Interactive COmpletion; better completion commands and tables.
#+end_quote

#+begin_src emacs-lisp
  (use-package vertico
    :demand t
    :bind
    (:map vertico-map ("C-q" . #'vertico-quick-insert)
          ("RET" . #'vertico-directory-enter)
          ("DEL" . #'vertico-directory-delete-word)
          ("M-d" . #'vertico-directory-delete-char))
    :custom
    (read-extended-command-predicate #'command-completion-default-include-p)
    (read-file-name-completion-ignore-case t)
    (read-buffer-completion-ignore-case t)
    (completion-ignore-case t)
    (vertico-count 20)
    (vertico-cycle t)
    (vertico-multiform-commands '((consult-line buffer)
                                  (consult-imenu reverse buffer)))
    (vertico-multiform-categories '((embark-keybinding grid)
                                    (file flat)))
    :config
    (vertico-mode)
    (vertico-multiform-mode)
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    (defun +embark-live-vertico ()
      "Shrink Vertico minibuffer when `embark-live' is active."
      (when-let (win (and (string-prefix-p "*Embark Live" (buffer-name))
                          (active-minibuffer-window)))
        (with-selected-window win
          (when (and (bound-and-true-p vertico--input)
                     (fboundp 'vertico-multiform-unobtrusive))
            (vertico-multiform-unobtrusive)))))
    (add-hook 'embark-collect-mode-hook #'+embark-live-vertico))
#+end_src

** Consult

#+begin_quote
Uses completing-read for search and navigation.
#+end_quote

#+begin_src emacs-lisp
  (use-package consult
    :demand t
    :bind (([remap Info-search] . consult-info)
           ([rebind switch-to-buffer] . consult-buffer)
           ([remap goto-line] . consult-goto-line)
           ([remap yank-pop] . consult-yank-pop)
           ("M-s M-g" . consult-grep)
           ("M-s M-f" . consult-find)
           ("M-s M-o" . consult-outline)
           ("M-s M-l" . consult-line)
           ("M-s M-b" . consult-buffer))
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :custom
    (register-preview-delay 0.5)
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref)
    (consult-narrow-key "<")
    (consult-preview-key 'any)
    (consult-line-numbers-widen t)
    :config
    (advice-add #'register-preview :override #'consult-register-window)
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     :preview-key '(:debounce 0.4 any)))
#+end_src

** Orderless

#+begin_quote
An orderless completion style that matches candidates in any order.
#+end_quote

#+begin_src emacs-lisp
  (use-package orderless
    :demand t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia

#+begin_quote
Adds marginalia annotations to completion candidates.
#+end_quote

#+begin_src emacs-lisp
  (use-package marginalia
    :demand t
    :config
    (marginalia-mode))
#+end_src

** Embark

#+begin_quote
Rich command actions based on a target.
#+end_quote

#+begin_src emacs-lisp
  (use-package embark
    :demand t
    :bind (("C-." . embark-act)
           ("M-." . embark-dwim)
           ("C-h B" . embark-bindings)
           :map minibuffer-local-map
           ("C-c C-c" . embark-collect)
           ("C-c C-e" . embark-export))
    :config
    (setq prefix-help-command #'embark-prefix-help-command)
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :after (embark)
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package wgrep
    :demand t
    :bind ( :map grep-mode-map
            ("e" . wgrep-change-to-wgrep-mode)
            ("C-x C-q" . wgrep-change-to-wgrep-mode)
            ("C-c C-c" . wgrep-finish-edit)))
#+end_src

** Cape

#+begin_quote
Completion At Point Extensions; completion backends.
#+end_quote

#+begin_src emacs-lisp
  (use-package cape
    :demand t
    :bind ("C-c p" . cape-prefix-map)
    :config
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    (add-hook 'completion-at-point-functions #'cape-history)
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))
#+end_src

** Flymake

#+begin_quote
Syntax checking and linting.
#+end_quote

#+begin_src emacs-lisp
  (use-package flymake
    :demand t
    :config
    (add-hook 'prog-mode-hook #'flymake-mode))
#+end_src

** Eglot

#+begin_quote
Emacs LSP client.
#+end_quote

#+begin_src emacs-lisp
  (use-package eglot
    :demand t
    :config
    (add-hook 'prog-mode-hook #'eglot-ensure))
#+end_src

#+begin_src emacs-lisp
  (use-package eglot-booster
    :ensure (:type git :host github :repo "jdtsmith/eglot-booster")
    :after (eglot)
    :config
    (eglot-booster-mode))
#+end_src

** Apheleia

#+begin_quote
Code formatting.
#+end_quote

#+begin_src emacs-lisp
  (use-package apheleia
    :demand t
    :config
    (add-hook 'prog-mode-hook #'apheleia-mode))
#+end_src

** Corfu

#+begin_quote
COmpletion in Region FUnction; enhanced in-buffer completion.
#+end_quote

#+begin_src emacs-lisp
  (use-package corfu
    :demand t
    :custom
    (global-corfu-minibuffer
     (lambda ()
       (not (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input)
                (eq (current-local-map) read-passwd-map)))))
    (corfu-quit-no-match t)
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-preselect 'prompt)
    (completion-category-overrides '((eglot (styles orderless))
                                     (eglot-capf (styles orderless))))
    (text-mode-ispell-word-completion nil)
    :config
    (keymap-unset corfu-map "RET")
    (corfu-popupinfo-mode)
    (add-hook 'prog-mode-hook #'corfu-mode)
    (add-hook 'shell-mode-hook #'corfu-mode)
    (add-hook 'eshell-mode-hook (lambda ()
                                  (setq-local corfu-auto nil)
                                  (corfu-mode))))
#+end_src

** Diff-hl

#+begin_quote
Git gutter.
#+end_quote

#+begin_src emacs-lisp
  (use-package diff-hl
    :demand t
    :config
    (add-hook 'prog-mode-hook #'diff-hl-mode))
#+end_src

** Treesitter

#+begin_quote
Parsing library.
#+end_quote

#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

** Indent Bars

#+begin_quote
Indentation guide bars.
#+end_quote

#+begin_src emacs-lisp
  (use-package indent-bars
    :demand t
    :custom
    (indent-bars-treesit-support t)
    (indent-bars-treesit-ignore-blank-lines-types '("module"))
    (indent-bars-pattern ".")
    (indent-bars-width-frac 0.2)
    (indent-bars-pad-frac 0.2)
    (indent-bars-color-by-depth '(:regexp "outline-\\([0-9]+\\)" :blend 1))
    (indent-bars-highlight-current-depth '(:pattern "." :pad 0.1 :width 0.45))
    :config
    (require 'indent-bars-ts)
    (add-hook 'prog-mode-hook #'indent-bars-mode))
#+end_src

** EditorConfig

#+begin_quote
Consistent coding style.
#+end_quote

#+begin_src emacs-lisp
  (use-package editorconfig
    :defer t
    :config
    (defun oxcl/update-indent-bars-with-editorconfig (size)
      (when (bound-and-true-p indent-bars-mode)
        (setq indent-bars-spacing-override size)
        (indent-bars-reset)))
    (dolist (_mode editorconfig-indentation-alist)
      (let ((_varlist (cdr _mode)))
        (setcdr _mode (append '((_ . oxcl/update-indent-bars-with-editorconfig))
                              (if (listp _varlist) _varlist `(,_varlist))))))
    (editorconfig-mode t))
#+end_src

** Ripgrep

#+begin_quote
Faster grep.
#+end_quote

#+begin_src emacs-lisp
  (use-package rg
    :demand t
    :bind ("C-x p /" . rg-project))
#+end_src

** Dape

#+begin_quote
Debug Adapter Protocol for Emacs.
#+end_quote

#+begin_src emacs-lisp
  (use-package dape
    :defer t
    :config
    (repeat-mode))
#+end_src

** Eat

#+begin_quote
Emulate A Terminal.
#+end_quote

#+begin_src emacs-lisp
  (use-package eat
    :demand t
    :custom
    (eat-kill-buffer-on-exit t)
    (eat-enable-mouse t))
#+end_src

** LaTex

#+begin_quote
Extensible package for writing and formatting TeX in Emacs.
#+end_quote

#+begin_src emacs-lisp
  (use-package auctex
    :elpaca (auctex :repo "https://git.savannah.gnu.org/git/auctex.git" :branch "main"
                    :pre-build (("make" "elpa"))
                    :build (:not elpaca--compile-info) ;; Make will take care of this step
                    :files ("*.el" "doc/*.info*" "etc" "images" "latex" "style")
                    :version (lambda (_) (require 'auctex) AUCTeX-version))
    :custom
    (TeX-auto-save t)
    (TeXX-parse-self t)
    :config
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode))
#+end_src
