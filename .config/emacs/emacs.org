#+TITLE: Emacs Literate Configuration
#+AUTHOR: Nathan Louie
#+DESCRIPTION: My personal Emacs configuration as a literate Org file
#+STARTUP: overview
#+PROPERTY: header-args :tangle "init.el"

*** Why Emacs?

1. Lispy languages are cool
2. Emacs is stable
3. Each package has its own niche and does it well

At the end of the day, this is just part of the fun that I have doing things.

*** Why a literate configuration?

Because it's easier to explain things in prose than in comments scattered around the config.

Use =C-c C-c= to evaluate code blocks and =C-c C-v C-t= to tangle the file.

#+begin_src emacs-lisp :tangle no :results none
(org-babel-tangle)
#+end_src

*** Why emacs-mac over emacs-plus?

1. It generally feels more like a native OSX citizen (frames, pixels, scrolling, display)
2. I don't use emacsclient

I'll switch when the emacs-mac fork is no longer maintained.

On OSX, type the line below (in terminal) to get a 1 pixel border:

#+begin_src bash :tangle no
  defaults write com.apple.universalaccess increaseContrast -bool YES
#+end_src

To control anti-aliasing on OSX:

#+begin_src bash :tangle no
  defaults write org.gnu.Emacs AppleFontSmoothing -int 0 # none
  defaults write org.gnu.Emacs AppleFontSmoothing -int 1 # light
  defaults write org.gnu.Emacs AppleFontSmoothing -int 2 # medium
  defaults write org.gnu.Emacs AppleFontSmoothing -int 3 # strong
#+end_src

* =early-init.el=

The [[file:early-init.el][file]] that contains customizations that need to take effect during Emacs startup earlier than the normal =init.el= file. Customizations related to GUI features will not work reliably in =early-init.el=, but if needed use hooks to do so.

#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; early-init.el --- Early initialization file -*- lexical-binding: t; -*-


  ;; This file is not part of GNU Emacs

  ;; This file is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; For a full copy of the GNU General Public License
  ;; see <http://www.gnu.org/licenses/>.


  ;;; Commentary:

  ;; The file that contains customizations that need to take effect during Emacs
  ;; startup earlier than the normal =init.el= file. Customizations related to GUI
  ;; features will not work reliably in =early-init.el=, but if needed use hooks
  ;; to do so.

  ;;; Code:
#+end_src

No site-wide runtime initializations and default library

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq site-run-file nil
        inhibit-default-init t)
#+end_src

Very large threshold for garbage collector during initialization which will be reset later.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5)
  (add-hook 'emacs-startup-hook
            #'(lambda () (setq gc-cons-threshold (* 16 1024 1024)
                               gc-cons-percentage 0.1)))
#+end_src

Use UTF-8 instead of English.

#+begin_src emacs-lisp :tangle "early-init.el"
  (set-language-environment "UTF-8")
#+end_src

Don't resize the frame when UI elements open.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq frame-inhibit-implied-resize t)
#+end_src

Don't try again to match case insensitive through alist.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq auto-mode-case-fold nil)
#+end_src

Disable startup screens and messages.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq inhibit-splash-screen t
        inhibit-startup-buffer-menu t
        inhibit-startup-echo-area-message user-login-name
        inhibit-startup-message t
        inhibit-startup-screen t
        inhibit-x-resources t)
#+end_src

Set the initial buffer and major-mode and message.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq initial-buffer-choice t
        initial-major-mode 'fundamental-mode
        initial-scratch-message nil)
#+end_src

Native compilation.

#+begin_src emacs-lisp :tangle "early-init.el"
  (when (native-comp-available-p)
    (setopt native-comp-async-report-warnings-errors 'silent
            native-comp-warning-on-missing-source nil
            package-native-compile t))
#+end_src

Verbosity settings.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq jka-compr-verbose nil
        byte-compile-verbose nil
        byte-compile-warnings nil)
#+end_src

Hide the UI elements.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq frame-title-format "%b"
        icon-title-format "%b")
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (push '(horizontal-scroll-bars) default-frame-alist)
  (when (bound-and-true-p tooltip-mode)
    (tooltip-mode -1))
  (menu-bar-mode 1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq use-dialog-box nil
        use-file-dialog nil
        pop-up-windows nil
        show-help-function nil)
#+end_src

Using =straight.el=.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq package-enable-at-startup nil)
#+end_src

#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; early-init.el ends here
#+end_src

* =init.el=

#+begin_src emacs-lisp
  ;;; init.el --- Initialization file -*- lexical-binding: t; -*-


  ;; This file is not part of GNU Emacs

  ;; This file is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; For a full copy of the GNU General Public License
  ;; see <http://www.gnu.org/licenses/>.


  ;;; Commentary:

  ;; Why Emacs?
  ;; I mean... why not? Emacs is pretty cool and configurable for my needs.

  ;; OSX
  ;; I use emacs-mac over emacs-plus because it feels more native to OSX
  ;; and I don't use emacsclient. I will continue to use emacs-mac until
  ;; there's news that it will no longer be maintained.

  ;;; Code:
#+end_src

** =straight.el=

I'm using =straight.el= instead of =elpaca.el= because it seems to be more stable as of writing this, and it works in the way that I expect it to.

Disable checking for faster startup.

#+begin_src emacs-lisp
  (setopt straight-check-for-modifications nil)
#+end_src

Bootstrap code.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Packages to install:

#+begin_src emacs-lisp
    (setq package-list
          '(

            ))
#+end_src

** =nl-defaults.el=

#+begin_src emacs-lisp
  (require 'bind-key)

  (add-to-list 'load-path user-emacs-directory)

  (require 'nl-defaults)
#+end_src

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  ;;; nl-defaults.el --- Sane Emacs defaults file -*- lexical-binding: t; -*-


  ;; This file is not part of GNU Emacs

  ;; This file is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; For a full copy of the GNU General Public License
  ;; see <http://www.gnu.org/licenses/>.


  ;;; Commentary:

  ;; The file contains changes to base Emacs settings that I think are more
  ;; reasonable to work with.

  ;;; Code:
#+end_src

*** Encoding

Use UTF-8 encoding whenever possible.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (prefer-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "English")
  (set-terminal-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
#+end_src

*** Recovery

If Emacs crashes, use =M-x recover-session= to recover the files.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq auto-save-default t
        auto-save-include-big-deletions t
        auto-save-interval 200
        auto-save-timeout 20)

  (let ((auto-save-dir (concat user-emacs-directory "auto-save/")))
    (unless (file-exists-p auto-save-dir)
      (make-directory auto-save-dir))
    (setq auto-save-file-name-transforms `((".*" ,auto-save-dir t)))
    (setq auto-save-list-file-prefix auto-save-dir)
    (setq tramp-auto-save-directory auto-save-dir))

  (setq auto-save-include-big-deletions t)
#+end_src

*** Tramp

#+begin_src emacs-lisp
  (setq tramp-terminal-type "tramp")
#+end_src

If the above doesnâ€™t work, use =sshx= instead of =ssh=. See this [[https://www.emacswiki.org/emacs/TrampMode#h5o-9][link]] for more details.

*** Backups

Don't make backup or lock files to avoid cluttering.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq create-lockfiles nil
        make-backup-files nil)
#+end_src

*** Recent Files

Builds a persistent list of recently opened files.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (require 'recentf)

  (setq recentf-exclude (list "^/\\(?:ssh\\|su\\|sudo\\)?:")
        recentf-max-menu-items 10
        recentf-max-saved-items 100)
#+end_src

Displays a message and prevents it from being logged (https://www.gnu.org/software/emacs/manual/html_node/elisp/Logging-Messages.html).

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (let (message-log-max)
    (recentf-mode 1))
#+end_src

*** History

Remove the text properties for kill ring entries to decrease load time (https://emacs.stackexchange.com/questions/4187).

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (defun nl/unpropertize-kill-ring ()
    (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

  (add-hook 'kill-emacs-hook 'nl/unpropertize-kill-ring)
    #+end_src

Make additional things persistent.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (require 'savehist)

  (setq kill-ring-max 50
        history-length 50)

  (setq savehist-additional-variables
        '(bookmark-history
          command-history
          custom-variable-history
          face-name-history
          file-name-history
          kill-ring
          mark-ring
          minibuffer-history
          query-replace-history
          read-char-history
          read-expression-history
          regexp-search-ring
          register-alist
          search-ring
          set-variable-value-history))
#+end_src

Don't save duplicates in the history.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq history-delete-duplicates t)
#+end_src

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (let (message-log-max)
    (savehist-mode 1))
#+end_src

*** Cursor

Persist the cursor position.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq save-place-file (expand-file-name "saveplace" user-emacs-directory)
        save-place-forget-unreadable-files t)

  (let (message-log-max)
    (save-place-mode 1))
#+end_src

*** Compilation

Changes to the behaviour of =M-x compile=.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq compilation-always-kill t
        compilation-ask-about-save nil
        compilation-scroll-output 'first-error)
#+end_src

Recenter to the middle of the window for =M-x compile-goto-error= and =M-x embark-export=.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq next-error-recenter '(4))
#+end_src

*** Dired

#+begin_src emacs-lisp
  (setq dired-free-space nil
        dired-dwim-target t
        dired-deletion-confirmer 'y-or-n-p
        dired-filter-verbose nil
        dired-recursive-deletes 'top
        dired-recursive-copies  'always
        dired-create-destination-dirs 'ask
        dired-auto-revert-buffer #'dired-buffer-stale-p
        image-dired-thumb-size 150)

  (setq dired-clean-confirm-killing-deleted-buffers nil)

  (setq dired-omit-verbose nil)
  (setq dired-omit-files (concat "\\`[.]?#\\|\\`[.][.]?\\'"
                                 "\\|\\(?:\\.js\\)?\\.meta\\'"
                                 "\\|\\.\\(?:elc|a\\|o\\|pyc\\|pyo\\|swp\\|class\\)\\'"
                                 "\\|^\\.DS_Store\\'"
                                 "\\|^\\.\\(?:svn\\|git\\)\\'"
                                 "\\|^\\.ccls-cache\\'"
                                 "\\|^__pycache__\\'"
                                 "\\|^\\.project\\(?:ile\\)?\\'"
                                 "\\|^flycheck_.*"
                                 "\\|^flymake_.*"))
#+end_src

*** Ediff

Configure to use a single frame and split windows horizontally.

#+begin_src emacs-lisp
  (setq ediff-window-setup-function #'ediff-setup-windows-plain
        ediff-split-window-function #'split-window-horizontally)
#+end_src

*** OSX Specific

Change the =M= key and title bar.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq mac-command-key-is-meta t
        mac-command-modifier 'meta
        mac-option-key-is-meta nil
        mac-option-modifier nil
        mac-use-title-bar nil)
#+end_src

Since OSX's =ls= doesn't support a variety of flags, use the =ls-lisp= version instead, particularly for =dired=.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq dired-use-ls-dired nil)
  (require 'ls-lisp)
  (setq ls-lisp-verbosity nil)
  (setq ls-lisp-dirs-first t)
  (setq ls-lisp-use-insert-directory-program nil)
#+end_src

Merge the system's and Emacs' clipboard.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq-default select-enable-clipboard t)
#+end_src

Makes sure that clipboard works properly in TTY.

#+begin_src emacs-lisp
  (defun nl/copy-from-osx ()
    (shell-command-to-string "pbpaste"))

  (defun nl/paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))

  (when (not (display-graphic-p))
    (setq interprogram-cut-function 'nl/paste-to-osx)
    (setq interprogram-paste-function 'nl/copy-from-osx))
#+end_src

*** Miscellaneous

Disable warnings from the legacy advice API.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq ad-redefinition-action 'accept)
#+end_src

Change the width of =display-line-numbers-mode=.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq-default display-line-numbers-width 3)
  (setq-default display-line-numbers-widen t)
#+end_src

Improve responsiveness by delaying syntax highlighting during input.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq redisplay-skip-fontification-on-input t)
#+end_src

Collect and display all available documentation immediately.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
#+end_src

Follow symlinks without prompt.

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (setq vc-follow-symlinks t)
#+end_src

#+begin_src emacs-lisp :tangle "nl-defaults.el"
  (provide 'nl-defaults)

  ;;; nl-defaults.el ends here
#+end_src

** =nl-library.el=

#+begin_src emacs-lisp
  (require 'nl-library)
#+end_src

#+begin_src emacs-lisp :tangle "nl-library.el"
  ;;; nl-library.el --- Helper functions file -*- lexical-binding: t; -*-


  ;; This file is not part of GNU Emacs

  ;; This file is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; For a full copy of the GNU General Public License
  ;; see <http://www.gnu.org/licenses/>.


  ;;; Commentary:

  ;; Some functions that are used elsewhere in the configuration.

  ;;; Code:
#+end_src

#+begin_src emacs-lisp :tangle "nl-library.el"
  ;;; nl-library.el ends here
#+end_src

** =nl-interface.el=

#+begin_src emacs-lisp
  (require 'nl-interface)
#+end_src

#+begin_src emacs-lisp :tangle "nl-interface.el"
  ;;; nl-interface.el --- Interface file -*- lexical-binding: t; -*-


  ;; This file is not part of GNU Emacs

  ;; This file is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; For a full copy of the GNU General Public License
  ;; see <http://www.gnu.org/licenses/>.


  ;;; Commentary:

  ;; Adjustments to the Emacs interface.

  ;;; Code:
#+end_src

*** Frame

Make frame and switch to the =*scratch*= buffer.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (defun nl/make-frame ()
    "Create a new frame and switch to *scratch* buffer."

    (interactive)
    (select-frame (make-frame))
    (switch-to-buffer "*scratch*"))
#+end_src

Close the current frame and kill Emacs if it was the last frame.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (defun nl/kill-emacs ()
    "Delete frame or kill Emacs if there is only one frame."

    (interactive)
    (condition-case nil
        (delete-frame)
      (error (save-buffers-kill-terminal))))
#+end_src

Change the default frame properties.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (require 'frame)

  (setq default-frame-alist '((min-height . 1)
                              (height . 45)
                              (min-width  . 1)
                              (width  . 81)
                              (vertical-scroll-bars . nil)
                              (internal-border-width . 24)
                              (left-fringe . 0)
                              (right-fringe . 0)
                              (tool-bar-lines . 0)
                              (menu-bar-lines . 1)))

  (setq initial-frame-alist default-frame-alist)
#+end_src

Frame related bindings.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (bind-key "M-n"        #'nl/make-frame)
  (bind-key "C-x C-c"    #'nl/kill-emacs)
  (bind-key "M-`"        #'other-frame)
  (bind-key "C-z"        nil)
#+end_src

*** Window

Margin and divider mode.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (setq-default window-divider-default-right-width 24
                window-divider-default-places 'right-only
                left-margin-width 0
                right-margin-width 0
                window-combination-resize nil) ; Do not resize windows proportionally

  (let (message-log-max)
    (window-divider-mode 1))
#+end_src

Toggle the dedicated flag on the current window.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (defun nl/toggle-window-dedicated ()
    "Toggle whether the current active window is dedicated or not."

    (interactive)
    (message
     (if (let (window (get-buffer-window (current-buffer)))
           (set-window-dedicated-p window (not (window-dedicated-p window))))
         "Window '%s' is dedicated"
       "Window '%s' is normal")
     (current-buffer))
    (force-window-update))

  (bind-key "C-c d" #'nl/toggle-window-dedicated)
#+end_src

*** Buffer

Change the size of temporary buffers.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (temp-buffer-resize-mode 1)
  (setq temp-buffer-max-height 8)
#+end_src

Use unique buffer names.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (require 'uniquify)

  (setq uniquify-buffer-name-style 'reverse
        uniquify-separator " â€¢ "
        uniquify-after-kill-buffer-p t
        uniquify-ignore-buffers-re "^\\*")
#+end_src

Don't ask which buffer to switch to after killing a buffer.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (bind-key "C-x k" #'kill-current-buffer)
#+end_src

*** Keyboard

Display the possible key bindings in incomplete commands.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (require 'which-key)

  (setq which-key-idle-delay 0.2)
  (which-key-mode 1)
#+end_src

*** Cursor

Set the appearance of the cursor

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (setq-default cursor-in-non-selected-windows nil
                cursor-type '(hbar . 2)
                cursor-intangible-mode t
                x-stretch-cursor nil)

  (blink-cursor-mode -1)
#+end_src

*** Mouse

Use the =mouse-avoidance-mode=.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (setq-default mouse-yank-at-point t)
  (mouse-avoidance-mode 'exile)
#+end_src

Activate the mouse in TTY mode.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (unless (display-graphic-p)
    (xterm-mouse-mode 1)
    (bind-key "<mouse-4>" #'scroll-down-line)
    (bind-key "<mouse-5>" #'scroll-up-line))
#+end_src

*** Scroll

Smoother scrolling.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (setq-default scroll-conservatively 101
                scroll-margin 2
                recenter-positions '(5 bottom))
#+end_src

*** Sound

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (setq-default visible-bell nil
                ring-bell-function 'ignore)
#+end_src

*** Text

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (setq-default use-short-answers t
                confirm-nonexistent-file-or-buffer nil)
#+end_src

Replace the region when inserting text.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (delete-selection-mode 1)
#+end_src

A smarter fill/unfill command.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (defun nl/fill-unfill ()
    "Like `fill-paragraph', but unfill if used twice."

    (interactive)
    (let ((fill-column
           (if (eq last-command #'nl/fill-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  (bind-key "M-q"  #'nl/fill-unfill)
#+end_src

*** =helpful.el=

An alternative to the built-in help that provides more contextual information.

#+begin_src emacs-lisp :tangle "nl-interface.el"
  (require 'helpful)

  (setq help-window-select t)
  (bind-key "C-h f" #'helpful-callable)
  (bind-key "C-h v" #'helpful-variable)
  (bind-key "C-h k" #'helpful-key)
  (bind-key "C-c C-d" #'helpful-at-point)
  (bind-key "C-h F" #'helpful-function)
  (bind-key "C-h C" #'helpful-command)
#+end_src

#+begin_src emacs-lisp :tangle "nl-interface.el"
  ;;; nl-interface.el ends here
#+end_src

** =nl-visual.el=

#+begin_src emacs-lisp
  (require 'nl-visual)
#+end_src

#+begin_src emacs-lisp :tangle "nl-visual.el"
  ;;; nl-visual.el --- Visual adjustments file -*- lexical-binding: t; -*-


  ;; This file is not part of GNU Emacs

  ;; This file is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; For a full copy of the GNU General Public License
  ;; see <http://www.gnu.org/licenses/>.


  ;;; Commentary:

  ;; Adjustments to the visual appearance of Emacs.

  ;;; Code:
#+end_src

*** Colours

#+begin_src emacs-lisp :tangle "nl-visual.el"
  (require 'nano-theme)
  (setq nano-fonts-use t)
  (nano-light)
  (nano-mode)


  (defun nl/set-face (face style)
    "Reset FACE and make it inherit STYLE."
    (set-face-attribute face nil
                        :foreground 'unspecified :background 'unspecified
                        :family     'unspecified :slant      'unspecified
                        :weight     'unspecified :height     'unspecified
                        :underline  'unspecified :overline   'unspecified
                        :box        'unspecified :inherit    style))
  (nl/set-face 'italic 'nano-faded)
#+end_src

*** Fonts

The font stack:
- Default: RobotoMono Nerd Font 14pt Light
- Italic: VictorMono Nerd Font 14pt Semilight
- Bold: RobotoMono Nerd Font 14pt Regular
- Unicode: Inconsolata Nerd Font 16pt Light

#+begin_src emacs-lisp :tangle "nl-visual.el"
  (set-face-attribute 'default nil
                      :family "Roboto Mono"
                      :weight 'light
                      :height 140)

  (set-face-attribute 'bold nil
                      :family "Roboto Mono"
                      :weight 'regular)

  (set-face-attribute 'italic nil
                      :family "Victor Mono"
                      :weight 'semilight
                      :slant 'italic)

  (set-fontset-font t 'unicode
                    (font-spec :name "Inconsolata Light"
                               :size 16)
                    nil)

  (set-fontset-font t '(#xe000 . #xffdd)
                    (font-spec :name "RobotoMono Nerd Font"
                               :size 12)
                    nil)
#+end_src

*** Typography

#+begin_src emacs-lisp :tangle "nl-visual.el"
  (setq-default fill-column 80
                sentence-end-double-space nil
                bidi-paragraph-direction 'left-to-right
                truncate-string-ellipsis "â€¦")
#+end_src

#+begin_src emacs-lisp :tangle "nl-visual.el"
  (require 'nano-theme)

  ;; Nicer glyphs for continuation and wrap
  (set-display-table-slot standard-display-table
                          'truncation (make-glyph-code ?â€¦ 'nano-faded))

  (defface wrap-symbol-face
    '((t (:family "Fira Code"
                  :inherit nano-faded)))
    "Specific face for wrap symbol")

  (set-display-table-slot standard-display-table
                          'wrap (make-glyph-code ?â†© 'wrap-symbol-face))
#+end_src

Fix a bug on OSX in term mode and using zsh.

#+begin_src emacs-lisp :tangle "nl-visual.el"
  (when (eq system-type 'darwin)
    (add-hook 'term-mode-hook
              (lambda ()
                (setq buffer-display-table (make-display-table)))))
#+end_src

Make sure underline is positioned at the very bottom.

#+begin_src emacs-lisp :tangle "nl-visual.el"
  (setq x-underline-at-descent-line nil
        x-use-underline-position-properties t
        underline-minimum-offset 10)
#+end_src

#+begin_src emacs-lisp :tangle "nl-visual.el"
  ;;; nl-visual.el ends here
#+end_src

** =nl-editing.el=
** =nl-completion.el=
** =nl-minibuffer.el=
** =nl-org.el=

#+begin_src emacs-lisp
  ;;; init.el ends here
#+end_src


** Exec Path From Shell

#+begin_quote
Ensure environment variables inside Emacs look the same as in the shell.
#+end_quote

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :demand t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

** Dependencies

Seems like Elpaca has issues with how =eldoc= and =seq= are installed. This should get rid of =Warning (emacs): eldoc loaded before Elpaca bactivation=.

#+begin_src emacs-lisp
  (unload-feature 'eldoc t)
  (setq custom-delayed-init-variables '())
  (setq global-eldoc-mode nil)

  (elpaca eldoc
    (require 'eldoc)
    (global-eldoc-mode))

  (defun +elpaca-unload-seq (e)
    (and (featurep 'seq) (unload-feature 'seq t))
    (elpaca--continue-build e))

  (defun +elpaca-seq-build-steps ()
    (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                         elpaca--pre-built-steps elpaca-build-steps))
            (list '+elpaca-unload-seq 'elpaca--activate-package)))
  (elpaca `(seq :build ,(+elpaca-seq-build-steps)))

  (use-package jsonrpc
    :ensure (:wait t)
    :defer t)

  (setq eglot-sync-connect 1
        eglot-autoshutdown t)
  (setq eglot-extend-to-xref t)
  (setq jsonrpc-event-hook nil)
  (setq eglot-events-buffer-size 0)
  (setq eglot-report-progress nil)
  (fset #'jsonrpc--log-event #'ignore)

  (setq eglot-events-buffer-config '(:size 0 :format full))

  (setq flymake-fringe-indicator-position 'left-fringe)
  (setq flymake-show-diagnostics-at-end-of-line nil)
  (setq flymake-suppress-zero-counters t)
  (setq flymake-wrap-around nil)
#+end_src

** Magit

#+begin_quote
A Git interface.
#+end_quote

#+begin_src emacs-lisp
  (use-package transient
    :defer t)

  (use-package magit
    :defer t
    :bind
    (("C-c g b" . 'magit-branch)
     ("C-c g B" . 'magit-blame)
     ("C-c g c" . 'magit-clone)
     ("C-c g f" . 'magit-find-file)
     ("C-c g i" . 'magit-init)
     ("C-c g l" . 'magit-log-buffer-file)
     ("C-c g m" . 'magit-dispatch)
     ("C-c g S" . 'magit-stage-file)
     ("C-c g s" . 'magit-status)
     ("C-c g U" . 'magit-unstage-file))
    :custom
    (magit-diff-refine-hunk 'all)
    :config
    (transient-bind-q-to-quit))

  (use-package forge
    :after magit
    :custom
    (forge-add-default-bindings nil)
    (forge-display-in-status-buffer nil)
    (forge-add-pullreq-refspec nil))
#+end_src

** Vertico

#+begin_quote
VERTical Interactive COmpletion; better completion commands and tables.
#+end_quote

#+begin_src emacs-lisp
  (use-package vertico
    :demand t
    :bind
    (:map vertico-map ("C-q" . #'vertico-quick-insert)
          ("RET" . #'vertico-directory-enter)
          ("DEL" . #'vertico-directory-delete-word)
          ("M-d" . #'vertico-directory-delete-char))
    :custom
    (read-extended-command-predicate #'command-completion-default-include-p)
    (read-file-name-completion-ignore-case t)
    (read-buffer-completion-ignore-case t)
    (completion-ignore-case t)
    (vertico-count 20)
    (vertico-cycle t)
    (vertico-multiform-commands '((consult-line buffer)
                                  (consult-imenu reverse buffer)))
    (vertico-multiform-categories '((embark-keybinding grid)
                                    (file flat)))
    :config
    (vertico-mode)
    (vertico-multiform-mode)
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    (defun +embark-live-vertico ()
      "Shrink Vertico minibuffer when `embark-live' is active."
      (when-let (win (and (string-prefix-p "*Embark Live" (buffer-name))
                          (active-minibuffer-window)))
        (with-selected-window win
          (when (and (bound-and-true-p vertico--input)
                     (fboundp 'vertico-multiform-unobtrusive))
            (vertico-multiform-unobtrusive)))))
    (add-hook 'embark-collect-mode-hook #'+embark-live-vertico))
#+end_src

** Consult

#+begin_quote
Uses completing-read for search and navigation.
#+end_quote

#+begin_src emacs-lisp
  (use-package consult
    :demand t
    :bind (([remap Info-search] . consult-info)
           ([rebind switch-to-buffer] . consult-buffer)
           ([remap goto-line] . consult-goto-line)
           ([remap yank-pop] . consult-yank-pop)
           ("M-s M-g" . consult-grep)
           ("M-s M-f" . consult-find)
           ("M-s M-o" . consult-outline)
           ("M-s M-l" . consult-line)
           ("M-s M-b" . consult-buffer))
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :custom
    (register-preview-delay 0.5)
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref)
    (consult-narrow-key "<")
    (consult-preview-key 'any)
    (consult-line-numbers-widen t)
    :config
    (advice-add #'register-preview :override #'consult-register-window)
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     :preview-key '(:debounce 0.4 any)))
#+end_src

** Orderless

#+begin_quote
An orderless completion style that matches candidates in any order.
#+end_quote

#+begin_src emacs-lisp
  (use-package orderless
    :demand t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia

#+begin_quote
Adds marginalia annotations to completion candidates.
#+end_quote

#+begin_src emacs-lisp
  (use-package marginalia
    :demand t
    :config
    (marginalia-mode))
#+end_src

** Embark

#+begin_quote
Rich command actions based on a target.
#+end_quote

#+begin_src emacs-lisp
  (use-package embark
    :demand t
    :bind (("C-." . embark-act)
           ("M-." . embark-dwim)
           ("C-h B" . embark-bindings)
           :map minibuffer-local-map
           ("C-c C-c" . embark-collect)
           ("C-c C-e" . embark-export))
    :config
    (setq prefix-help-command #'embark-prefix-help-command)
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :after (embark)
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package wgrep
    :demand t
    :bind ( :map grep-mode-map
            ("e" . wgrep-change-to-wgrep-mode)
            ("C-x C-q" . wgrep-change-to-wgrep-mode)
            ("C-c C-c" . wgrep-finish-edit)))
#+end_src

** Cape

#+begin_quote
Completion At Point Extensions; completion backends.
#+end_quote

#+begin_src emacs-lisp
  (use-package cape
    :demand t
    :bind ("C-c p" . cape-prefix-map)
    :init
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))
#+end_src

** Flymake

#+begin_quote
Syntax checking and linting.
#+end_quote

#+begin_src emacs-lisp
  (use-package flymake
    :demand t
    :config
    (add-hook 'prog-mode-hook #'flymake-mode))
#+end_src

** Eglot

#+begin_quote
Emacs LSP client.
#+end_quote

#+begin_src emacs-lisp
  (use-package eglot
    :demand t
    :config
    (add-hook 'prog-mode-hook #'eglot-ensure))
#+end_src

#+begin_src emacs-lisp
  (use-package eglot-booster
    :ensure (:type git :host github :repo "jdtsmith/eglot-booster")
    :after (eglot)
    :config
    (eglot-booster-mode))
#+end_src

** Apheleia

#+begin_quote
Code formatting.
#+end_quote

#+begin_src emacs-lisp
  (use-package apheleia
    :demand t
    :config
    (add-hook 'prog-mode-hook #'apheleia-mode))
#+end_src

** Corfu

#+begin_quote
COmpletion in Region FUnction; enhanced in-buffer completion.
#+end_quote

#+begin_src emacs-lisp
  (use-package corfu
    :demand t
    :custom
    (global-corfu-minibuffer
     (lambda ()
       (not (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input)
                (eq (current-local-map) read-passwd-map)))))
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-delay 0.1)
    (corfu-auto-prefix 1)
    (corfu-quit-no-match 'separator)
    (corfu-popupinfo-delay '(0.1 . 0.1))
    (text-mode-ispell-word-completion nil)
    :config
    (defun orderless-fast-dispatch (word index total)
      (and (= index 0) (= total 1) (length< word 4)
           (cons 'orderless-literal-prefix word)))

    (orderless-define-completion-style orderless-fast
                                       (orderless-style-dispatchers '(orderless-fast-dispatch))
                                       (orderless-matching-styles '(orderless-literal orderless-regexp)))

    (add-hook 'corfu-mode-hook
              (lambda ()
                (setq-local completion-styles '(orderless-fast basic)
                            completion-category-overrides nil
                            completion-category-defaults nil)))
    (keymap-set corfu-map "RET" #'corfu-send)
    (corfu-popupinfo-mode)
    (global-corfu-mode))
#+end_src

** Diff-hl

#+begin_quote
Git gutter.
#+end_quote

#+begin_src emacs-lisp
  (use-package diff-hl
    :demand t
    :config
    (add-hook 'prog-mode-hook #'diff-hl-mode))
#+end_src

** Treesitter

#+begin_quote
Parsing library.
#+end_quote

#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

** Indent Bars

#+begin_quote
Indentation guide bars.
#+end_quote

#+begin_src emacs-lisp
  (use-package indent-bars
    :demand t
    :custom
    (indent-bars-treesit-support t)
    (indent-bars-treesit-ignore-blank-lines-types '("module"))
    (indent-bars-pattern ".")
    (indent-bars-width-frac 0.2)
    (indent-bars-pad-frac 0.2)
    (indent-bars-color-by-depth '(:regexp "outline-\\([0-9]+\\)" :blend 1))
    (indent-bars-highlight-current-depth '(:pattern "." :pad 0.1 :width 0.45))
    :config
    (require 'indent-bars-ts)
    (add-hook 'prog-mode-hook #'indent-bars-mode))
#+end_src

** EditorConfig

#+begin_quote
Consistent coding style.
#+end_quote

#+begin_src emacs-lisp
  (use-package editorconfig
    :defer t
    :config
    (defun oxcl/update-indent-bars-with-editorconfig (size)
      (when (bound-and-true-p indent-bars-mode)
        (setq indent-bars-spacing-override size)
        (indent-bars-reset)))
    (dolist (_mode editorconfig-indentation-alist)
      (let ((_varlist (cdr _mode)))
        (setcdr _mode (append '((_ . oxcl/update-indent-bars-with-editorconfig))
                              (if (listp _varlist) _varlist `(,_varlist))))))
    (editorconfig-mode t))
#+end_src

** Ripgrep

#+begin_quote
Faster grep.
#+end_quote

#+begin_src emacs-lisp
  (use-package rg
    :demand t
    :bind ("C-x p /" . rg-project))
#+end_src

** Dape

#+begin_quote
Debug Adapter Protocol for Emacs.
#+end_quote

#+begin_src emacs-lisp
  (use-package dape
    :defer t
    :config
    (repeat-mode))
#+end_src

** Eat

#+begin_quote
Emulate A Terminal.
#+end_quote

#+begin_src emacs-lisp
  (use-package eat
    :demand t
    :custom
    (eat-kill-buffer-on-exit t)
    (eat-enable-mouse t))
#+end_src

** LaTex

#+begin_quote
Extensible package for writing and formatting TeX in Emacs.
#+end_quote

#+begin_src emacs-lisp
  (use-package auctex
    :elpaca (auctex :repo "https://git.savannah.gnu.org/git/auctex.git" :branch "main"
                    :pre-build (("make" "elpa"))
                    :build (:not elpaca--compile-info)
                    :files ("*.el" "doc/*.info*" "etc" "images" "latex" "style")
                    :version (lambda (_) (require 'auctex) AUCTeX-version))
    :custom
    (TeX-auto-save t)
    :config
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode))
#+end_src
